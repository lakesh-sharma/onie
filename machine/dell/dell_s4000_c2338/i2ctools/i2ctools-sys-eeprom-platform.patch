Add platform specific stuff for the sys-eeprom

diff --git a/sys_eeprom/onie_tlvinfo.c b/sys_eeprom/onie_tlvinfo.c
index 1ef477c..e63279b 100644
--- a/sys_eeprom/onie_tlvinfo.c
+++ b/sys_eeprom/onie_tlvinfo.c
@@ -259,6 +259,7 @@ static void decode_tlv_value(tlvinfo_tlv_t * tlv, char* value)
     case TLV_CODE_VENDOR_NAME:
     case TLV_CODE_DIAG_VERSION:
     case TLV_CODE_SERVICE_TAG:
+    case TLV_CODE_VENDOR_EXT:
 	memcpy(value, tlv->value, tlv->length);
 	value[tlv->length] = 0;
 	break;
@@ -273,13 +274,6 @@ static void decode_tlv_value(tlvinfo_tlv_t * tlv, char* value)
     case TLV_CODE_MAC_SIZE:
 	sprintf(value, "%u", (tlv->value[0] << 8) | tlv->value[1]);
 	break;
-    case TLV_CODE_VENDOR_EXT:
-	value[0] = 0;
-	for (i = 0; (i < (TLV_DECODE_VALUE_MAX_LEN/5)) && (i < tlv->length);
-	     i++) {
-	    sprintf(value, "%s 0x%02X", value, tlv->value[i]);
-	}
-	break;
     case TLV_CODE_CRC_32:
 	sprintf(value, "0x%02X%02X%02X%02X",
 		tlv->value[0], tlv->value[1], tlv->value[2],
@@ -647,6 +641,7 @@ bool tlvinfo_add_tlv(u_int8_t * eeprom, int tcode, char * strval)
     case TLV_CODE_VENDOR_NAME:
     case TLV_CODE_DIAG_VERSION:
     case TLV_CODE_SERVICE_TAG:
+    case TLV_CODE_VENDOR_EXT:
 	strncpy(data, strval, MAX_TLV_VALUE_LEN);
 	new_tlv_len = min(MAX_TLV_VALUE_LEN, strlen(strval));
 	break;
@@ -687,7 +682,6 @@ bool tlvinfo_add_tlv(u_int8_t * eeprom, int tcode, char * strval)
 	printf("WARNING: The CRC TLV is set automatically and cannot be set " \
 	       "manually.\n");
 	return(FALSE);
-    case TLV_CODE_VENDOR_EXT:
     default:
 	if (set_bytes(data, strval, &new_tlv_len) != 0 ) {
 	    return(FALSE);
@@ -723,6 +717,7 @@ bool tlvinfo_add_tlv(u_int8_t * eeprom, int tcode, char * strval)
     return(TRUE);
 }
 
+#define MAX_EEPROM_I2C_BUS_PATH 15
 /*
  * read_sys_eeprom - read the hwinfo from i2c EEPROM
  */
@@ -733,9 +728,16 @@ int read_sys_eeprom(void *eeprom_data, int offset, int len)
     int i = 0;
     u_int8_t *c;
     int addr = SYS_EEPROM_OFFSET + offset;
+    int i2c_addr, i2c_bus;
+    char i2c_bus_path[MAX_EEPROM_I2C_BUS_PATH];
 
     c = eeprom_data;
-    if (eeprom_open(SYS_EEPROM_I2C_DEVICE, SYS_EEPROM_I2C_ADDR,
+    i2c_addr = get_i2c_addr();
+    i2c_bus = get_i2c_bus();
+    memset(i2c_bus_path, 0, MAX_EEPROM_I2C_BUS_PATH);
+    snprintf(i2c_bus_path, MAX_EEPROM_I2C_BUS_PATH, "/dev/i2c-%d", i2c_bus);
+
+    if (eeprom_open(i2c_bus_path, i2c_addr,
 		    EEPROM_TYPE_8BIT_ADDR, &e)) {
 	printf("ERROR: Cannot open I2C device\n");
 	return -1;
@@ -758,15 +760,23 @@ int write_sys_eeprom(void *eeprom_data, int len)
     int i = 0;
     u_int8_t *c;
     u_int16_t  addr = SYS_EEPROM_OFFSET;
+    int i2c_addr, i2c_bus;
+    char i2c_bus_path[MAX_EEPROM_I2C_BUS_PATH];
 
     c = eeprom_data;
+    i2c_addr = get_i2c_addr();
+    i2c_bus = get_i2c_bus();
+    memset(i2c_bus_path, 0, MAX_EEPROM_I2C_BUS_PATH);
+    snprintf(i2c_bus_path, MAX_EEPROM_I2C_BUS_PATH, "/dev/i2c-%d", i2c_bus);
+
     for (i = 0; i < len; i++) {
-	if (eeprom_open(SYS_EEPROM_I2C_DEVICE, SYS_EEPROM_I2C_ADDR,
+	if (eeprom_open(i2c_bus_path, i2c_addr,
 			EEPROM_TYPE_8BIT_ADDR, &e)) {
 	    printf("ERROR: Cannot open I2C device\n");
 	    return -1;
 	}
 	eeprom_write_byte(&e, addr, *c);
+	usleep(5000);
 	eeprom_close(&e);
 	c++; addr++;
     }
diff --git a/sys_eeprom/onie_tlvinfo.h b/sys_eeprom/onie_tlvinfo.h
index 5714f37..da8ab3a 100644
--- a/sys_eeprom/onie_tlvinfo.h
+++ b/sys_eeprom/onie_tlvinfo.h
@@ -170,3 +170,5 @@ bool tlvinfo_delete_tlv(u_int8_t * eeprom, u_int8_t code);
 bool tlvinfo_add_tlv(u_int8_t * eeprom, int tcode, char * strval);
 bool tlvinfo_decode_tlv(u_int8_t *eeprom, u_int8_t tcode, char* value);
 void show_tlv_code_list(void);
+int get_i2c_addr(void);
+int get_i2c_bus (void);
diff --git a/sys_eeprom/sys_eeprom.c b/sys_eeprom/sys_eeprom.c
index a77837f..2c57a58 100644
--- a/sys_eeprom/sys_eeprom.c
+++ b/sys_eeprom/sys_eeprom.c
@@ -5,6 +5,9 @@
 #include "onie_tlvinfo.h"
 
 static u_int8_t eeprom[SYS_EEPROM_SIZE];
+static int i2c_addr = SYS_EEPROM_I2C_ADDR;
+static int i2c_bus = 0;
+
 /*
  *  This macro defines the sys_eeprom command line command.
  */
@@ -12,10 +15,14 @@ cmd_usage()
 {
     static const char *usage =
 	"Display and program the system EEPROM data block.\n"
-	"Usage: sys-eeprom [-h][-l] [-e] [-s <code>=<value>,...]\n"
+	"Usage: sys-eeprom [-h][-l] [-e] [-b bus] [-a address] [-s <code>=<value>,...]\n"
 	"   With no arguments display the EEPROM contents.\n"
 	"   -h --help\n"
 	"      Display usage\n"
+	"   -a --addr <address>\n"
+	"      Set the I2C bus address. \n"
+	"   -b --bus <bus>\n"
+	"      Set the I2C device bus. \n"
 	"   -l --list\n"
 	"      List the understood TLV codes and names.\n"
 	"   -e --erase\n"
@@ -38,24 +45,56 @@ int main(int argc, char * const argv[])
     int count = 0;
     int err = 0;
     int update = 0;
+    int skip_usage = 0;
     char *value, *subopts, *tname;
     int index, c, i, option_index, tcode;
     char tlv_value[TLV_DECODE_VALUE_MAX_LEN];
+    char i2c_sw_sel_cmd[SYS_EEPROM_I2C_SW_CMD_SZ];
+    int idx;
+    bool address_present = 0;
 
     const size_t tlv_code_count = sizeof(tlv_code_list) /
 	sizeof(tlv_code_list[0]);
 
     char *tokens[tlv_code_count + 1];
-    const char *short_options = "hels:g:";
+    const char *short_options = "hels:g:a:b:";
     const struct option long_options[] = {
 	{"help",    no_argument,          0,    'h'},
 	{"list",    no_argument,          0,    'l'},
 	{"erase",   no_argument,          0,    'e'},
 	{"set",     required_argument,    0,    's'},
 	{"get",     required_argument,    0,    'g'},
+	{"addr",    required_argument,    0,    'a'},
+	{"bus",     required_argument,    0,    'b'},
 	{0,         0,                    0,      0},
     };
 
+    /*
+     * Parse the arguments to check if user has provided i2c address,
+     * if so, user wants to access other eeprom on board, i.e. not
+     * the ID eeprom. So we would skip the mux setting needed for
+     * ID eeprom access.
+     */
+    for(idx = 0; idx < argc; ++idx) {
+        if((strcmp(argv[idx],"-a") == 0) || (strcmp(argv[idx],"--a") == 0)
+             || (strcmp(argv[idx],"-addr") == 0) || (strcmp(argv[idx],"--addr") == 0)) {
+            address_present = 1;
+        }
+    }
+
+    /*
+     * If user has not provided the i2c address,
+     * Set the I2C switch config so that ID-eeprom channel is selected.
+     */
+    if(address_present == 0) {
+        memset(i2c_sw_sel_cmd, 0, SYS_EEPROM_I2C_SW_CMD_SZ);
+        snprintf(i2c_sw_sel_cmd, SYS_EEPROM_I2C_SW_CMD_SZ, "i2cset -y %d 0x%x %d %d ",
+	        SYS_EEPROM_I2C_SW_I2C_BUS, SYS_EEPROM_I2C_SW_I2C_ADDR,
+	        SYS_EEPROM_I2C_SW_CH_SEL_REG, SYS_EEPROM_I2C_SW_CH_SEL_VAL);
+
+        system(i2c_sw_sel_cmd);
+    }
+
     for (i = 0; i < tlv_code_count; i++) {
 	    tokens[i] = (char *) malloc(6);
 	    sprintf(tokens[i], "0x%x", tlv_code_list[i].m_code);
@@ -136,6 +175,17 @@ int main(int argc, char * const argv[])
             goto syseeprom_err;
 	break;
 
+	case 'a':
+            i2c_addr = strtoul(optarg, NULL, 0);
+            count = 0;
+            skip_usage = 1;
+	break;
+
+	case 'b':
+            i2c_bus = strtoul(optarg, NULL, 0);
+            count = 0;
+            skip_usage = 1;
+	break;
 	default:
 	    cmd_usage();
             err = 1;
@@ -143,7 +193,7 @@ int main(int argc, char * const argv[])
 	}
     }
     if (!count) {
-	if (argc > 1) {
+	if ((argc > 1) && (skip_usage == 0)) {
 	    cmd_usage();
             err = 1;
 	} else {
@@ -167,3 +217,13 @@ syseeprom_err:
     }
     return  (err == 0) ? 0 : 1;
 }
+
+int get_i2c_addr (void)
+{
+    return i2c_addr;
+}
+
+int get_i2c_bus (void)
+{
+    return i2c_bus;
+}
diff --git a/sys_eeprom/sys_eeprom_platform.h b/sys_eeprom/sys_eeprom_platform.h
index 529f774..444fe18 100644
--- a/sys_eeprom/sys_eeprom_platform.h
+++ b/sys_eeprom/sys_eeprom_platform.h
@@ -1,4 +1,16 @@
 #ifndef __SYS_EEPROM_PLATFORM_H_
 #define __SYS_EEPROM_PLATFORM_H_
 
+#define SYS_EEPROM_MAX_SIZE     0x100
+#define SYS_EEPROM_OFFSET       0
+#define SYS_EEPROM_SIZE         SYS_EEPROM_MAX_SIZE
+#define SYS_EEPROM_I2C_DEVICE  "/dev/i2c-0"
+#define SYS_EEPROM_I2C_ADDR     0x53
+
+#define SYS_EEPROM_I2C_SW_I2C_BUS     0
+#define SYS_EEPROM_I2C_SW_I2C_ADDR    0x70
+#define SYS_EEPROM_I2C_SW_CH_SEL_REG  0
+#define SYS_EEPROM_I2C_SW_CH_SEL_VAL  8
+#define SYS_EEPROM_I2C_SW_CMD_SZ      50
+
 #endif /* __SYS_EEPROM_PLATFORM_H_ */
